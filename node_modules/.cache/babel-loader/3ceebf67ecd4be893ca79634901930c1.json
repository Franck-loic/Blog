{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { chainPropTypes, deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Avatar from '../Avatar';\nimport avatarGroupClasses, { getAvatarGroupUtilityClass } from './avatarGroupClasses';\nconst SPACINGS = {\n  small: -16,\n  medium: null\n};\n\nconst overridesResolver = (props, styles) => {\n  return deepmerge(styles.root || {}, {\n    [`& .${avatarGroupClasses.avatar}`]: styles.avatar\n  });\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar']\n  };\n  return composeClasses(slots, getAvatarGroupUtilityClass, classes);\n};\n\nconst AvatarGroupRoot = experimentalStyled('div', {}, {\n  name: 'MuiAvatarGroup',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme\n}) => ({\n  [`& .MuiAvatar-root`]: {\n    border: `2px solid ${theme.palette.background.default}`,\n    boxSizing: 'content-box',\n    marginLeft: -8,\n    '&:last-child': {\n      marginLeft: 0\n    }\n  },\n\n  /* Styles applied to the root element. */\n  display: 'flex',\n  flexDirection: 'row-reverse'\n}));\nconst AvatarGroupAvatar = experimentalStyled(Avatar, {}, {\n  name: 'MuiAvatarGroup',\n  slot: 'Avatar'\n})(({\n  theme\n}) => ({\n  border: `2px solid ${theme.palette.background.default}`,\n  boxSizing: 'content-box',\n  marginLeft: -8,\n  '&:last-child': {\n    marginLeft: 0\n  }\n}));\nconst AvatarGroup = /*#__PURE__*/React.forwardRef(function AvatarGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAvatarGroup'\n  });\n\n  const {\n    children: childrenProp,\n    className,\n    max = 5,\n    spacing = 'medium',\n    variant = 'circular'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"max\", \"spacing\", \"variant\"]);\n\n  const clampedMax = max < 2 ? 2 : max;\n\n  const styleProps = _extends({}, props, {\n    max,\n    spacing,\n    variant\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  const children = React.Children.toArray(childrenProp).filter(child => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n  const extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;\n  const marginLeft = spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing;\n  return /*#__PURE__*/React.createElement(AvatarGroupRoot, _extends({\n    styleProps: styleProps,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), extraAvatars ? /*#__PURE__*/React.createElement(AvatarGroupAvatar, {\n    styleProps: styleProps,\n    className: classes.avatar,\n    style: {\n      marginLeft\n    },\n    variant: variant\n  }, \"+\", extraAvatars) : null, children.slice(0, children.length - extraAvatars).reverse().map(child => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _extends({\n        marginLeft\n      }, child.props.style),\n      variant: child.props.variant || variant\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Max avatars to show before +x.\n   * @default 5\n   */\n  max: chainPropTypes(PropTypes.number, props => {\n    if (props.max < 2) {\n      return new Error(['Material-UI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Spacing between avatars.\n   * @default 'medium'\n   */\n  spacing: PropTypes.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.number]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The variant to use.\n   * @default 'circular'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['circular', 'rounded', 'square']), PropTypes.string])\n} : void 0;\nexport default AvatarGroup;","map":{"version":3,"sources":["C:/Users/Blasus/Desktop/afpa/ecf/node_modules/@material-ui/core/AvatarGroup/AvatarGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","isFragment","clsx","chainPropTypes","deepmerge","unstable_composeClasses","composeClasses","experimentalStyled","useThemeProps","Avatar","avatarGroupClasses","getAvatarGroupUtilityClass","SPACINGS","small","medium","overridesResolver","props","styles","root","avatar","useUtilityClasses","styleProps","classes","slots","AvatarGroupRoot","name","slot","theme","border","palette","background","default","boxSizing","marginLeft","display","flexDirection","AvatarGroupAvatar","AvatarGroup","forwardRef","inProps","ref","children","childrenProp","className","max","spacing","variant","other","clampedMax","Children","toArray","filter","child","process","env","NODE_ENV","console","error","join","isValidElement","extraAvatars","length","undefined","createElement","style","slice","reverse","map","cloneElement","propTypes","node","object","string","number","Error","oneOfType","oneOf","sx"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { chainPropTypes, deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Avatar from '../Avatar';\nimport avatarGroupClasses, { getAvatarGroupUtilityClass } from './avatarGroupClasses';\nconst SPACINGS = {\n  small: -16,\n  medium: null\n};\n\nconst overridesResolver = (props, styles) => {\n  return deepmerge(styles.root || {}, {\n    [`& .${avatarGroupClasses.avatar}`]: styles.avatar\n  });\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar']\n  };\n  return composeClasses(slots, getAvatarGroupUtilityClass, classes);\n};\n\nconst AvatarGroupRoot = experimentalStyled('div', {}, {\n  name: 'MuiAvatarGroup',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme\n}) => ({\n  [`& .MuiAvatar-root`]: {\n    border: `2px solid ${theme.palette.background.default}`,\n    boxSizing: 'content-box',\n    marginLeft: -8,\n    '&:last-child': {\n      marginLeft: 0\n    }\n  },\n\n  /* Styles applied to the root element. */\n  display: 'flex',\n  flexDirection: 'row-reverse'\n}));\nconst AvatarGroupAvatar = experimentalStyled(Avatar, {}, {\n  name: 'MuiAvatarGroup',\n  slot: 'Avatar'\n})(({\n  theme\n}) => ({\n  border: `2px solid ${theme.palette.background.default}`,\n  boxSizing: 'content-box',\n  marginLeft: -8,\n  '&:last-child': {\n    marginLeft: 0\n  }\n}));\nconst AvatarGroup = /*#__PURE__*/React.forwardRef(function AvatarGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAvatarGroup'\n  });\n\n  const {\n    children: childrenProp,\n    className,\n    max = 5,\n    spacing = 'medium',\n    variant = 'circular'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"max\", \"spacing\", \"variant\"]);\n\n  const clampedMax = max < 2 ? 2 : max;\n\n  const styleProps = _extends({}, props, {\n    max,\n    spacing,\n    variant\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  const children = React.Children.toArray(childrenProp).filter(child => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n  const extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;\n  const marginLeft = spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing;\n  return /*#__PURE__*/React.createElement(AvatarGroupRoot, _extends({\n    styleProps: styleProps,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), extraAvatars ? /*#__PURE__*/React.createElement(AvatarGroupAvatar, {\n    styleProps: styleProps,\n    className: classes.avatar,\n    style: {\n      marginLeft\n    },\n    variant: variant\n  }, \"+\", extraAvatars) : null, children.slice(0, children.length - extraAvatars).reverse().map(child => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _extends({\n        marginLeft\n      }, child.props.style),\n      variant: child.props.variant || variant\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Max avatars to show before +x.\n   * @default 5\n   */\n  max: chainPropTypes(PropTypes.number, props => {\n    if (props.max < 2) {\n      return new Error(['Material-UI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Spacing between avatars.\n   * @default 'medium'\n   */\n  spacing: PropTypes.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.number]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The variant to use.\n   * @default 'circular'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['circular', 'rounded', 'square']), PropTypes.string])\n} : void 0;\nexport default AvatarGroup;"]},"metadata":{},"sourceType":"module"}